{"version":3,"sources":["store/LoginProvider.jsx","components/Footer/Footer.jsx","assets/colors/colors.js","components/Header/Header.jsx","components/Navigation/Navigation.jsx","components/PageTemplate/PageTemplate.jsx","components/Button/Button.jsx","components/Input/Input.jsx","components/Card/Card.jsx","components/Loader/Loader.jsx","components/Editor/Editor.jsx","components/Form/Form.jsx","components/Select/Select.jsx","library/fetchData.js","components/Detail/Detail.jsx","pages/MainPage.jsx","containers/SalesContainer.jsx","containers/CardContainer.jsx","containers/DetailContainer.jsx","containers/SalesHeaderContainer.jsx","components/Label/Label.jsx","containers/WriteContainer.jsx","containers/LoginContainer.jsx","containers/SignUpContainer.jsx","pages/SalesPage.jsx","pages/EnjoyPage.jsx","pages/QnAPage.jsx","pages/MyPage.jsx","pages/LoginPage.jsx","pages/ContactPage.jsx","pages/DetailPage.jsx","pages/WritePage.jsx","pages/SingUpPage.jsx","containers/ItemUpdateContainer.jsx","pages/ItemUpdatePage.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["LoginContext","createContext","LoginProvider","children","useState","user_Id","logon","value","loginStatus","setLoginStatus","Provider","setStyle","css","Footer","COLORS","primary","secondary","teritiaty","warning","Header","useContext","useEffect","user_Id_this","sessionStorage","getItem","logon_this","JSON","parse","to","variation","color","onClick","removeItem","alert","window","location","href","Navigation","PageTemplate","toggleModal","style","height","position","size","width","SIZES","small","medium","big","VARIATIONS","outline","noborder","Button","type","number","file","radio","React","memo","placeholder","autoFocus","name","onChange","required","id","defaultStyle","imageWrapper","bodyStyle","headerStyle","infoStyle","bottomStyle","Card","item_Number","item_Detail","item_Writer","item_Sort","item_Brand_model","item_Price","item_Status","item_Name","sales_Contact","sales_KakaoId","deal_Location","item_Picture","src","alt","slice","borderColor","fontColor","Loader","formWrapper","Form","onSubmit","selectWrapper","Select","length","map","v","i","key","fetchData","method","url","data","axios","detailWrapperStyle","detailStyle","footerStyle","Detail","props","history","go","confirm","then","res","catch","err","MainPage","SalesContainer","loading","setLoading","items","setItems","prevItems","concat","flexWrap","display","justifyContent","CardContainer","DetailContainer","item_Id","item","setItem","console","log","prevItem","SalesHeaderWrapper","SalesHeaderContainer","labelStyle","fileStyle","Label","htmlFor","WriteContainerWrapper","radioWrapper","Date","now","post","setPost","fileName","filePath","uploadedImg","setUploadedImg","setValues","e","target","preventDefault","Number","colSpan","imgFile","files","formData","FormData","append","loginWrapper","LoginContainer","user_Id_FF","user_Password_FF","loginInfo","setLoginInfo","getInputValue","fontSize","success","stringify","msg","textAlign","SignUpContainer","user_Name","user_Password","user_Password_check","user_Email","signUp","setSignUp","SalesPage","EnjoyPage","QnAPage","MyPage","LoginPage","ContactPage","DetailPage","match","params","WritePage","SingUpPage","ItemUpdateContainer","prevImg","ItemUpdatePage","App","styles","exact","path","component","SignUpPage","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.45ee38df.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\r\n\r\nconst LoginContext = createContext();\r\n\r\nexport const LoginProvider = ({ children }) => {\r\n  const [loginStatus, setLoginStatus] = useState({\r\n    user_Id: \"\",\r\n    logon: false,\r\n  });\r\n\r\n  const value = {\r\n    loginStatus,\r\n    setLoginStatus,\r\n  };\r\n\r\n  return (\r\n    <LoginContext.Provider value={value}>{children}</LoginContext.Provider>\r\n  );\r\n};\r\n\r\nexport default LoginContext;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer css={setStyle()}>\r\n      <h1>935 GARAGE PROJECT</h1>\r\n    </footer>\r\n  );\r\n};\r\n\r\nconst setStyle = () => {\r\n  const defaultStyle = css`\r\n    width: 100%;\r\n    height: 8rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background: black;\r\n    h1 {\r\n      margin: 0;\r\n      color: white;\r\n    }\r\n  `;\r\n  return [defaultStyle];\r\n};\r\n\r\nexport default Footer;\r\n","const COLORS = {\r\n  primary: \"#774836\",\r\n  secondary: \"#82363A\",\r\n  teritiaty: \"#2E2A39\",\r\n  warning: \"#d63031\",\r\n};\r\n\r\nexport default COLORS;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { Button } from \"../index\";\r\nimport { COLORS } from \"../../assets/colors\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useEffect, useContext } from \"react\";\r\nimport { LoginContext } from \"../../store\";\r\n\r\nconst Header = () => {\r\n  const { loginStatus, setLoginStatus } = useContext(LoginContext);\r\n  const { logon } = loginStatus;\r\n\r\n  useEffect(() => {\r\n    const user_Id_this = sessionStorage.getItem(\"user_Id\");\r\n    const logon_this = JSON.parse(sessionStorage.getItem(\"logon\"));\r\n    setLoginStatus({ user_Id: user_Id_this, logon: logon_this });\r\n  }, [setLoginStatus]);\r\n\r\n  const logout = () => {\r\n    setLoginStatus({ user_Id: \"\", logon: false });\r\n    sessionStorage.removeItem(\"user_Id\");\r\n    sessionStorage.removeItem(\"logon\");\r\n    alert(\"로그아웃 되었습니다.\");\r\n    window.location.href = \"/\";\r\n  };\r\n\r\n  return (\r\n    <header css={setStyle()}>\r\n      <section>\r\n        {!logon && (\r\n          <Link to=\"/login\">\r\n            <Button variation=\"noborder\" color=\"secondary\">\r\n              Login\r\n            </Button>\r\n          </Link>\r\n        )}\r\n        {logon && (\r\n          <Button variation=\"noborder\" color=\"secondary\" onClick={logout}>\r\n            Logout\r\n          </Button>\r\n        )}\r\n\r\n        {logon && (\r\n          <Link to=\"/mypage\">\r\n            <Button variation=\"noborder\" color=\"secondary\">\r\n              MyPage\r\n            </Button>\r\n          </Link>\r\n        )}\r\n        <Link to=\"/contact\">\r\n          <Button variation=\"noborder\" color=\"secondary\">\r\n            Contact\r\n          </Button>\r\n        </Link>\r\n      </section>\r\n      <h1>HEADER</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nconst setStyle = () => {\r\n  const defaultStyle = css`\r\n    position: relative;\r\n    width: 100%;\r\n    height: 14rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background: ${COLORS.teritiaty};\r\n    section {\r\n      position: absolute;\r\n      top: 0;\r\n      right: 0;\r\n      margin-right: 2rem;\r\n      color: white;\r\n      a {\r\n        text-decoration: none;\r\n      }\r\n    }\r\n    h1 {\r\n      color: white;\r\n    }\r\n  `;\r\n  return [defaultStyle];\r\n};\r\n\r\nexport default Header;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { COLORS } from \"../../assets/colors\";\r\nimport { Button } from \"../index\";\r\n\r\nconst Navigation = () => {\r\n  return (\r\n    <nav css={setStyle()}>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\">\r\n            <Button>MAIN</Button>\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/sales\">\r\n            <Button>SALES</Button>\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/enjoy\">\r\n            <Button>MUSIC</Button>\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/qna\">\r\n            <Button>QnA</Button>\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nconst setStyle = () => {\r\n  const defaultStyle = css`\r\n    width: 100%;\r\n    height: 3.5rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background: ${COLORS.primary};\r\n    ul {\r\n      width: 80%;\r\n      list-style: none;\r\n      display: flex;\r\n      flex-direction: row;\r\n      align-items: center;\r\n      justify-content: space-around;\r\n      a {\r\n        text-decoration: none;\r\n      }\r\n    }\r\n  `;\r\n  return [defaultStyle];\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport { Header, Footer, Navigation } from \"../index\";\r\n\r\nconst PageTemplate = ({ children }) => {\r\n  return (\r\n    <>\r\n      <Header toggleModal />\r\n      <Navigation />\r\n      <section style={{ height: \"100%\", position: \"relative\" }}>\r\n        {children}\r\n      </section>\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PageTemplate;\r\n","/**  @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport { COLORS } from \"../../assets/colors\";\r\n\r\n// 버튼 컴포넌트\r\nconst Button = ({\r\n  children,\r\n  onClick,\r\n  color = \"primary\",\r\n  size = \"medium\",\r\n  variation,\r\n  width,\r\n  type = \"button\",\r\n}) => {\r\n  return (\r\n    <button\r\n      css={setStyle({ color, size, variation, width })}\r\n      type={type}\r\n      onClick={onClick}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\n// 스타일 설정 함수\r\nconst setStyle = ({ color, size, variation, width }) => {\r\n  // 사이즈 객체\r\n  const SIZES = {\r\n    small: css`\r\n      padding: 0 0.5rem;\r\n      height: 2rem;\r\n      font-size: 0.4rem;\r\n    `,\r\n    medium: css`\r\n      padding: 0 1rem;\r\n      height: 3rem;\r\n      font-size: 0.8rem;\r\n    `,\r\n    big: css`\r\n      padding: 0 1.4rem;\r\n      height: 4rem;\r\n      font-size: 1.2rem;\r\n    `,\r\n  };\r\n\r\n  // 변형 스타일 객체\r\n  const VARIATIONS = {\r\n    outline: css`\r\n      border: 1px solid ${COLORS[color]};\r\n      color: ${COLORS[color]};\r\n      background: transparent;\r\n      &:active {\r\n        background: ${COLORS[color]};\r\n        color: white;\r\n        transition: 0.4s;\r\n      }\r\n    `,\r\n    noborder: css`\r\n      border: none;\r\n      color: ${COLORS[color]};\r\n      background: transparent;\r\n      &:active {\r\n        background: ${COLORS[color]};\r\n        color: white;\r\n        transition: 0.4s;\r\n      }\r\n    `,\r\n  };\r\n\r\n  // 기본 스타일\r\n  const defaultStyle = css`\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    box-sizing: border-box;\r\n    padding: 0.4rem;\r\n    background: ${COLORS[color]};\r\n    border: none;\r\n    color: white;\r\n    font-size: 1.3rem;\r\n    border-radius: 0.5rem;\r\n    outline: none;\r\n    cursor: pointer;\r\n\r\n    /* 버튼 클리 시 스타일 */\r\n    &:active {\r\n      transform: scale(0.98);\r\n      box-shadow: 0 0 1px 1px rgba(255, 255, 255, 0.12),\r\n        0 0 2px 2px rgba(255, 255, 255, 0.12),\r\n        0 0 4px 4px rgba(255, 255, 255, 0.12);\r\n    }\r\n\r\n    & + button {\r\n      margin-left: 3rem;\r\n    }\r\n  `;\r\n  // width는 인라인으로 직접 적용하는 것이기 때문에 객체로 리턴\r\n  return [defaultStyle, SIZES[size], VARIATIONS[variation], { width }];\r\n};\r\n\r\n// 버튼 컴포넌트에서 받는 Props 관리\r\n// isRequired는 필수 입력 사항으로, 미입력 시 에러 발생\r\nButton.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  onClick: PropTypes.func,\r\n  color: PropTypes.string,\r\n  size: PropTypes.string,\r\n  variation: PropTypes.string,\r\n  width: PropTypes.string,\r\n};\r\n\r\nexport default Button;\r\n","/**@jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport React from \"react\";\r\n\r\nconst Input = ({\r\n  placeholder,\r\n  width,\r\n  autoFocus,\r\n  name,\r\n  value,\r\n  onChange,\r\n  type = \"text\",\r\n  required = false,\r\n}) => {\r\n  return (\r\n    <input\r\n      id={name}\r\n      type={type}\r\n      css={setStyle({ type, width })}\r\n      name={name}\r\n      value={value}\r\n      placeholder={placeholder}\r\n      autoFocus={autoFocus}\r\n      onChange={onChange}\r\n      required={required}\r\n    ></input>\r\n  );\r\n};\r\n\r\nconst setStyle = ({ type, width }) => {\r\n  const defaultStyle = css`\r\n    padding: 0.8rem 0 0.2rem 0;\r\n    width: 12rem;\r\n    height: 1.4rem;\r\n    border: none;\r\n    border-bottom: 1px solid #0c0c0c;\r\n    outline: none;\r\n    &:focus {\r\n      transform: scale(1.05);\r\n      transition: 0.1s ease-out;\r\n    }\r\n    & + & {\r\n      margin-top: 1rem;\r\n    }\r\n  `;\r\n\r\n  const TYPES = {\r\n    number: css`\r\n      outline: none;\r\n      ::-webkit-outer-spin-button,\r\n      ::-webkit-inner-spin-button {\r\n        -webkit-appearance: none;\r\n      }\r\n    `,\r\n    file: css`\r\n      display: none;\r\n    `,\r\n    radio: css`\r\n      width: 1rem;\r\n    `,\r\n  };\r\n\r\n  return [defaultStyle, TYPES[type], { width }];\r\n};\r\nexport default React.memo(Input);\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"../\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { COLORS } from \"../../assets/colors\";\r\n\r\nconst Card = ({\r\n  item_Number,\r\n  user_Id,\r\n  item_Writer,\r\n  item_Sort,\r\n  item_Brand_model,\r\n  item_Price,\r\n  item_Detail,\r\n  item_Status,\r\n  sales_Contact,\r\n  sales_KakaoId,\r\n  deal_Location,\r\n  item_Name,\r\n  item_Picture,\r\n  onClick,\r\n}) => {\r\n  return (\r\n    <section css={defaultStyle}>\r\n      <div css={[imageWrapper]}>\r\n        <img src={item_Picture} alt=\"\" width=\"100%\" height=\"100%\" />\r\n      </div>\r\n      <article css={bodyStyle}>\r\n        <div css={headerStyle}>\r\n          <h1>{item_Name}</h1>\r\n          <span>{item_Status}</span>\r\n        </div>\r\n        <div css={infoStyle}>\r\n          <fieldset>\r\n            <legend>본문 내용</legend>\r\n            <p>{item_Detail.slice(0, 80)}...</p>\r\n          </fieldset>\r\n        </div>\r\n        <div css={bottomStyle}>\r\n          <Link to={`/sales/detail/${item_Number}`}>\r\n            <Button variation=\"noborder\">더 보기</Button>\r\n          </Link>\r\n        </div>\r\n      </article>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst defaultStyle = css`\r\n  margin: 0.8rem;\r\n  width: 21rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  position: relative;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);\r\n    transition: 0.3s;\r\n  }\r\n`;\r\n\r\nconst imageWrapper = css`\r\n  width: 100%;\r\n  height: 18rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst bodyStyle = css`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst headerStyle = css`\r\n  width: 95%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  h1 {\r\n    margin: 0.5rem;\r\n    font-size: 1.6rem;\r\n    font-weight: 400;\r\n  }\r\n  span {\r\n    background: ${COLORS.secondary};\r\n    padding: 0.4rem;\r\n    margin-right: 0.5rem;\r\n    border-radius: 0.2rem;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst infoStyle = css`\r\n  width: 90%;\r\n  fieldset {\r\n    border: 1px solid ${COLORS.secondary};\r\n  }\r\n  fieldset > legend {\r\n    padding: 0.2rem;\r\n    margin-right: 0.5rem;\r\n    color: ${COLORS.secondary};\r\n  }\r\n  p {\r\n    margin: 0.4rem 0 0 0;\r\n  }\r\n`;\r\n\r\nconst bottomStyle = css`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  width: 100%;\r\n  a {\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nCard.propTypes = {\r\n  item_Number: PropTypes.number.isRequired,\r\n  user_Id: PropTypes.string.isRequired,\r\n  item_Writer: PropTypes.string.isRequired,\r\n  item_Sort: PropTypes.string.isRequired,\r\n  item_Brand_model: PropTypes.string.isRequired,\r\n  item_Price: PropTypes.number.isRequired,\r\n  item_Detail: PropTypes.string.isRequired,\r\n  item_Status: PropTypes.string.isRequired,\r\n  sales_Contact: PropTypes.string.isRequired,\r\n  sales_KakaoId: PropTypes.string.isRequired,\r\n  deal_Location: PropTypes.string.isRequired,\r\n  item_Name: PropTypes.string.isRequired,\r\n  item_Picture: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Card;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { COLORS } from \"../../assets/colors\";\r\n\r\nconst Loader = ({ borderColor = \"primary\", fontColor = \"secondary\" }) => {\r\n  return (\r\n    <div css={style(borderColor, fontColor)}>\r\n      <div></div>\r\n      <div>LOADING</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst style = (borderColor, fontColor) => css`\r\n  margin: 10rem auto;\r\n  &,\r\n  div {\r\n    position: relative;\r\n    padding: 0;\r\n    width: 8rem;\r\n    height: 8rem;\r\n    border-radius: 100%;\r\n    box-sizing: border-box;\r\n  }\r\n  & > div:first-of-type {\r\n    border: 3px solid transparent;\r\n    border-color: transparent ${COLORS[borderColor]};\r\n    animation: rotate-loading 1.5s linear 0s infinite normal;\r\n    transform-origin: 50% 50%;\r\n  }\r\n  & > div + div {\r\n    position: absolute;\r\n    top: 54px;\r\n    text-align: center;\r\n    font-size: 15px;\r\n    color: ${COLORS[fontColor]};\r\n    opacity: 0;\r\n    animation: loading-text-opacity 2s linear 0s infinite normal;\r\n  }\r\n  &:hover div:first-of-type {\r\n    border-color: transparent ${COLORS[fontColor]};\r\n  }\r\n  &:hover > &,\r\n  & div {\r\n    transition: all 0.5s ease-in-out;\r\n  }\r\n\r\n  @keyframes rotate-loading {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n\r\n  @keyframes loading-text-opacity {\r\n    0% {\r\n      opacity: 0.4;\r\n    }\r\n    25% {\r\n      opacity: 0;\r\n    }\r\n    75% {\r\n      opacity: 1;\r\n    }\r\n    100% {\r\n      opacity: 0.4;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Loader;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport CKEditor from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\n\r\nconst Editor = ({ content, setContent }) => {\r\n  return (\r\n    <article css={defaultEditorStyle}>\r\n      <CKEditor\r\n        editor={ClassicEditor}\r\n        data={content}\r\n        config={{\r\n          ckfinder: {\r\n            // Upload the images to the server using the CKFinder QuickUpload command\r\n            // You have to change this address to your server that has the ckfinder php connector\r\n            uploadUrl: \"/tmp/images\",\r\n          },\r\n        }}\r\n        onInit={(editor) => {\r\n          // You can store the \"editor\" and use when it is needed.\r\n          console.log(\"Editor is ready to use!\", editor);\r\n        }}\r\n        onChange={(event, editor) => {\r\n          const data = editor.getData();\r\n          setContent(data);\r\n        }}\r\n        onBlur={(event, editor) => {\r\n          console.log(\"Blur.\", editor);\r\n        }}\r\n        onFocus={(event, editor) => {\r\n          console.log(\"Focus.\", editor);\r\n        }}\r\n      />\r\n    </article>\r\n  );\r\n};\r\n\r\nconst defaultEditorStyle = css`\r\n  overflow: hidden;\r\n`;\r\n\r\nexport default Editor;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\n\r\nconst Form = ({ children, onSubmit }) => {\r\n  return (\r\n    <form css={formWrapper} onSubmit={onSubmit}>\r\n      {children}\r\n    </form>\r\n  );\r\n};\r\n\r\nconst formWrapper = css`\r\n  width: 100%;\r\n  margin-bottom: 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  textarea {\r\n    margin: 2rem 0;\r\n    padding: 1rem;\r\n    width: 90%;\r\n    height: 14rem;\r\n    box-sizing: border-box;\r\n    border: 1px solid black;\r\n    border-radius: 0.2rem;\r\n    resize: none;\r\n  }\r\n  td > button {\r\n    margin-top: 1rem;\r\n  }\r\n`;\r\n\r\nexport default Form;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport propTypes from \"prop-types\";\r\n\r\nconst Select = ({ value, name, onChange }) => {\r\n  return (\r\n    <select onChange={onChange} name={name} id={name} css={selectWrapper}>\r\n      {value.length > 0 &&\r\n        value.map((v, i) => (\r\n          <option value={v} key={i}>\r\n            {v}\r\n          </option>\r\n        ))}\r\n    </select>\r\n  );\r\n};\r\n\r\nconst selectWrapper = css`\r\n  margin: 0.5rem 0;\r\n  padding: 0.2rem;\r\n  outline: none;\r\n  width: 80%;\r\n  &:hover {\r\n    transform: scale(1.02);\r\n  }\r\n`;\r\n\r\nSelect.propTypes = {\r\n  value: propTypes.array.isRequired,\r\n};\r\n\r\nexport default Select;\r\n","import axios from \"axios\";\r\n\r\nexport const fetchData = ({ method, url, data }) =>\r\n  axios({ method, url, data });\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { Button } from \"../Button\";\r\nimport { COLORS } from \"../../assets/colors\";\r\nimport { useContext } from \"react\";\r\nimport { LoginContext } from \"../../store\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { fetchData } from \"../../library\";\r\n\r\nconst Detail = (props) => {\r\n  const {\r\n    item_Number,\r\n    user_Id,\r\n    item_Writer,\r\n    item_Sort,\r\n    item_Brand_model,\r\n    item_Price,\r\n    item_Detail,\r\n    item_Status,\r\n    sales_Contact,\r\n    sales_KakaoId,\r\n    deal_Location,\r\n    item_Name,\r\n    item_Picture,\r\n  } = props;\r\n\r\n  const { loginStatus } = useContext(LoginContext);\r\n\r\n  const onRemove = () => {\r\n    if (window.confirm(\"정말로 삭제하시겠습니까?\")) {\r\n      fetchData({\r\n        method: \"POST\",\r\n        url: \"/sales/detail/remove\",\r\n        data: { item_Number },\r\n      })\r\n        .then((res) => {\r\n          if (res.data === true) {\r\n            window.location.href = \"/sales\";\r\n            return alert(\"글이 삭제되었습니다.\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          throw err;\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section css={detailWrapperStyle}>\r\n      <img src={item_Picture} alt=\"\" />\r\n      <header css={headerStyle}>\r\n        <h1>{item_Name}</h1> <span>{item_Status}</span>\r\n      </header>\r\n      <table css={infoStyle}>\r\n        <tbody>\r\n          <tr>\r\n            <td>판매자</td>\r\n            <td>{item_Writer}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>판매자 연락처</td>\r\n            <td>{sales_Contact}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>카카오톡ID</td>\r\n            <td>{sales_KakaoId}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>악기 종류</td>\r\n            <td>{item_Sort}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>제조사</td>\r\n            <td>{item_Brand_model}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>거래 위치</td>\r\n            <td>{deal_Location}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>가격</td>\r\n            <td>{item_Price} 원</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <p css={detailStyle}>{item_Detail}</p>\r\n      <footer css={footerStyle}>\r\n        <Button onClick={() => window.history.go(-1)} variation=\"outline\">\r\n          돌아가기\r\n        </Button>\r\n        {loginStatus.user_Id === user_Id && (\r\n          <div>\r\n            <Link to={`/sales/detail/${item_Number}/update`}>\r\n              <Button variation=\"outline\" color=\"secondary\">\r\n                글 수정\r\n              </Button>\r\n            </Link>\r\n            <Button variation=\"outline\" color=\"warning\" onClick={onRemove}>\r\n              글 삭제\r\n            </Button>\r\n          </div>\r\n        )}{\" \"}\r\n      </footer>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst detailWrapperStyle = css`\r\n  margin: 1rem auto;\r\n  padding-bottom: 1rem;\r\n  width: 50%;\r\n  min-width: 25rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  color: ${COLORS.teritiaty};\r\n  img {\r\n    padding: 2rem;\r\n    width: 80%;\r\n  }\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);\r\n    transition: 0.3s;\r\n  }\r\n`;\r\n\r\nconst headerStyle = css`\r\n  width: 80%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0.1rem 0.3rem;\r\n  border: 1px solid ${COLORS.primary};\r\n  border-radius: 0.3rem;\r\n  margin-bottom: 1rem;\r\n  span {\r\n    background: ${COLORS.secondary};\r\n    padding: 0.4rem;\r\n    border-radius: 0.2rem;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst infoStyle = css`\r\n  width: 80%;\r\n  padding: 0.3rem;\r\n  border: 1px solid ${COLORS.primary};\r\n  border-radius: 0.3rem;\r\n  tr {\r\n    line-height: 2rem;\r\n  }\r\n`;\r\n\r\nconst detailStyle = css`\r\n  width: 80%;\r\n  padding: 0.3rem;\r\n  border: 1px solid ${COLORS.primary};\r\n  border-radius: 0.3rem;\r\n`;\r\n\r\nconst footerStyle = css`\r\n  width: 81%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  a {\r\n    text-decoration: none;\r\n    margin-right: 1rem;\r\n  }\r\n`;\r\n\r\nexport default Detail;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\n\r\nconst MainPage = () => {\r\n  return (\r\n    <>\r\n      <PageTemplate>\r\n        <h1>MAIN PAGE</h1>\r\n      </PageTemplate>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchData } from \"../library\";\r\nimport { CardContainer } from \"./index\";\r\nimport { Loader } from \"../components\";\r\n\r\nconst SalesContainer = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [items, setItems] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetchData({ method: \"GET\", url: \"/sales/items\" })\r\n      .then((data) => {\r\n        setItems((prevItems) => prevItems.concat(data.data));\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n  }, []);\r\n  return (\r\n    <section\r\n      style={{\r\n        width: \"100%\",\r\n        flexWrap: \"wrap\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      {loading && <Loader />}\r\n      {!loading && <CardContainer data={items} />}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SalesContainer;\r\n","import React from \"react\";\r\nimport { Card } from \"../components\";\r\n\r\nconst CardContainer = ({ data }) => {\r\n  return (\r\n    <>\r\n      {data.length > 0 &&\r\n        data.map((v) => (\r\n          <Card\r\n            key={v.item_Number}\r\n            item_Number={v.item_Number}\r\n            user_Id={v.user_Id}\r\n            item_Writer={v.item_Writer}\r\n            item_Sort={v.item_Sort}\r\n            item_Brand_model={v.item_Brand_model}\r\n            item_Price={v.item_Price}\r\n            item_Detail={v.item_Detail}\r\n            item_Status={v.item_Status}\r\n            sales_Contact={v.sales_Contact}\r\n            sales_KakaoId={v.sales_KakaoId}\r\n            deal_Location={v.deal_Location}\r\n            item_Name={v.item_Name}\r\n            item_Picture={v.item_Picture}\r\n          />\r\n        ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardContainer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Detail, Loader } from \"../components\";\r\nimport { fetchData } from \"../library\";\r\n\r\nconst DetailContainer = ({ data, item_Id }) => {\r\n  const [item, setItem] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetchData({\r\n      method: \"POST\",\r\n      url: `/sales/detail/item`,\r\n      data: { item_Id },\r\n    })\r\n      .then((data) => {\r\n        console.log(data);\r\n        setItem((prevItem) => data.data);\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        // 개발용\r\n        alert(\"DB에 같은 아이디로 저장된 문서가 있습니다.\");\r\n        throw err;\r\n      });\r\n  }, [item_Id]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <Loader />}\r\n      {!loading && (\r\n        <Detail\r\n          item_Number={item.item_Number}\r\n          user_Id={item.user_Id}\r\n          item_Writer={item.item_Writer}\r\n          item_Sort={item.item_Sort}\r\n          item_Brand_model={item.item_Brand_model}\r\n          item_Price={item.item_Price}\r\n          item_Detail={item.item_Detail}\r\n          item_Status={item.item_Status}\r\n          sales_Contact={item.sales_Contact}\r\n          sales_KakaoId={item.sales_KakaoId}\r\n          deal_Location={item.deal_Location}\r\n          item_Name={item.item_Name}\r\n          item_Picture={item.item_Picture}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DetailContainer;\r\n","/**@jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { Input, Button } from \"../components\";\r\nimport { useContext } from \"react\";\r\nimport { LoginContext } from \"../store\";\r\n\r\nconst SalesHeaderContainer = () => {\r\n  const { loginStatus } = useContext(LoginContext);\r\n\r\n  const checkLogin = () => {\r\n    if (loginStatus.logon === true) {\r\n      window.location.href = \"/sales/write\";\r\n    } else {\r\n      alert(\"로그인 하셔야 글을 작성하실 수 있습니다.\");\r\n      return (window.location.href = \"/login\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <nav css={SalesHeaderWrapper}>\r\n      <div>\r\n        <Input />\r\n        <Button variation=\"noborder\" color=\"secondary\">\r\n          검색\r\n        </Button>\r\n        <Button variation=\"noborder\" color=\"secondary\" onClick={checkLogin}>\r\n          글쓰기\r\n        </Button>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nconst SalesHeaderWrapper = css`\r\n  width: 100%;\r\n  margin: 1rem auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  a {\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nexport default SalesHeaderContainer;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { COLORS } from \"../../assets/colors\";\r\n\r\nconst Label = ({ htmlFor, children, file }) => {\r\n  return (\r\n    <label htmlFor={htmlFor} css={[labelStyle, file && fileStyle]}>\r\n      {children}\r\n    </label>\r\n  );\r\n};\r\n\r\nconst labelStyle = css`\r\n  margin-right: 1.5rem;\r\n`;\r\n\r\nconst fileStyle = css`\r\n  display: inline-block;\r\n  padding: 0.25rem 0.4rem;\r\n  background: ${COLORS.secondary};\r\n  color: white;\r\n  border-radius: 0.2rem;\r\n  cursor: pointer;\r\n  &:active {\r\n    transform: scale(0.99);\r\n    box-shadow: inset 0 0 10px #000000;\r\n  }\r\n`;\r\n\r\nexport default Label;\r\n","/**@jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport React, { useState } from \"react\";\r\nimport { Input, Button, Form, Select } from \"../components\";\r\nimport { fetchData } from \"../library\";\r\nimport { COLORS } from \"../assets/colors\";\r\nimport { Label } from \"../components/Label\";\r\n\r\nconst WriteContainer = () => {\r\n  const [post, setPost] = useState({\r\n    item_Name: \"\",\r\n    deal_Location: \"\",\r\n    sales_KakaoId: \"\",\r\n    sales_Contact: \"\",\r\n    item_Status: \"\",\r\n    item_Price: \"\",\r\n    item_Brand_model: \"\",\r\n    item_Sort: \"기타\",\r\n    item_Writer: \"\",\r\n    item_Detail: \"\",\r\n    item_Number: Date.now(),\r\n    item_Picture: \"\",\r\n    user_Id: \"\",\r\n  });\r\n\r\n  const {\r\n    item_Name,\r\n    deal_Location,\r\n    sales_KakaoId,\r\n    sales_Contact,\r\n    item_Price,\r\n    item_Brand_model,\r\n    item_Detail,\r\n  } = post;\r\n\r\n  const [uploadedImg, setUploadedImg] = useState({\r\n    fileName: \"\",\r\n    filePath: \"\",\r\n  });\r\n\r\n  const setValues = (e) => {\r\n    const { value, name } = e.target;\r\n    console.log(value, name);\r\n    setPost({ ...post, [name]: value });\r\n  };\r\n\r\n  const getImage = (e) => {\r\n    const imgFile = e.target.files[0];\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"img\", imgFile);\r\n\r\n    fetchData({ method: \"POST\", data: formData, url: \"/sales/image\" }).then(\r\n      (res) => {\r\n        if (res) {\r\n          console.log(res);\r\n          const { fileName } = res.data;\r\n          setUploadedImg({\r\n            fileName,\r\n            filePath: `/images/${fileName}`,\r\n          });\r\n          setPost({ ...post, item_Picture: `/images/${fileName}` });\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const user_Id = sessionStorage.getItem(\"user_Id\");\r\n    const data = post;\r\n\r\n    fetchData({\r\n      method: \"POST\",\r\n      data: {\r\n        ...data,\r\n        user_Id,\r\n        item_Price: Number(item_Price),\r\n        item_Writer: user_Id,\r\n      },\r\n      url: \"/sales/write\",\r\n    }).then((res) => {\r\n      if (res.data) {\r\n        setPost({\r\n          item_Name: \"\",\r\n          deal_Location: \"\",\r\n          sales_KakaoId: \"\",\r\n          sales_Contact: \"\",\r\n          item_Status: \"\",\r\n          item_Price: \"\",\r\n          item_Brand_model: \"\",\r\n          item_Sort: \"\",\r\n          item_Writer: \"\",\r\n          item_Detail: \"\",\r\n          item_Picture: \"\",\r\n        });\r\n        window.location.href = \"/sales\";\r\n        return alert(\"글이 성공적으로 작성되었습니다.\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <section css={WriteContainerWrapper}>\r\n      <Form onSubmit={onSubmit}>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td colSpan=\"2\">\r\n                <Input\r\n                  name=\"item_Name\"\r\n                  width=\"100%\"\r\n                  autoFocus={true}\r\n                  placeholder=\"제목을 입력해 주세요\"\r\n                  value={item_Name}\r\n                  onChange={setValues}\r\n                  required={true}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"deal_Location\">거래 위치</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"deal_Location\"\r\n                  placeholder=\"거래 위치를 입력해 주세요\"\r\n                  value={deal_Location}\r\n                  onChange={setValues}\r\n                  required={true}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"sales_Contact\">연락처</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"sales_Contact\"\r\n                  placeholder=\"연락처를 입력해 주세요\"\r\n                  value={sales_Contact}\r\n                  onChange={setValues}\r\n                  required={true}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"sales_KakaoId\">카카오톡 ID</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"sales_KakaoId\"\r\n                  value={sales_KakaoId}\r\n                  onChange={setValues}\r\n                  placeholder=\"카톡 아이디를 입력해 주세요\"\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"item_Status\">팝니다/삽니다</Label>\r\n              </td>\r\n              <td>\r\n                <div css={radioWrapper}>\r\n                  <Input\r\n                    name=\"item_Status\"\r\n                    placeholder=\"악기를 사실 건가요, 파실 건가요?\"\r\n                    value=\"팝니다\"\r\n                    onChange={setValues}\r\n                    type=\"radio\"\r\n                    required={true}\r\n                  />\r\n                  <Label htmlFor=\"item_Stauts\">팝니다</Label>\r\n\r\n                  <Input\r\n                    name=\"item_Status\"\r\n                    placeholder=\"악기를 사실 건가요, 파실 건가요?\"\r\n                    value=\"삽니다\"\r\n                    onChange={setValues}\r\n                    type=\"radio\"\r\n                  />\r\n                  <Label htmlFor=\"item_Stauts\">삽니다</Label>\r\n                </div>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"item_Price\">가격</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"item_Price\"\r\n                  value={item_Price}\r\n                  placeholder=\"가격은 숫자만 입력해 주세요\"\r\n                  onChange={setValues}\r\n                  required={true}\r\n                  type=\"number\"\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"item_Brand_model\">제조사</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"item_Brand_model\"\r\n                  value={item_Brand_model}\r\n                  onChange={setValues}\r\n                  placeholder=\"제조사를 입력해 주세요\"\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"item_Sort\">악기 분류</Label>\r\n              </td>\r\n              <td>\r\n                <Select\r\n                  value={[\"기타\", \"드럼\", \"베이스\", \"키보드\"]}\r\n                  onChange={setValues}\r\n                  name=\"item_Sort\"\r\n                ></Select>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"item_Image\" file={true}>\r\n                  이미지 업로드\r\n                </Label>\r\n              </td>\r\n              <td>\r\n                <div>\r\n                  <Input type=\"file\" name=\"item_Image\" onChange={getImage} />\r\n                </div>\r\n              </td>\r\n            </tr>\r\n            {uploadedImg.fileName ? (\r\n              <tr>\r\n                <td colSpan=\"2\" css={imageWrapper}>\r\n                  <img\r\n                    src={uploadedImg.filePath}\r\n                    alt=\"productImage\"\r\n                    width=\"100%\"\r\n                  />\r\n                </td>\r\n                <td></td>\r\n              </tr>\r\n            ) : null}\r\n          </tbody>\r\n        </table>\r\n        <textarea\r\n          name=\"item_Detail\"\r\n          value={item_Detail}\r\n          onChange={setValues}\r\n        ></textarea>\r\n        <Button width=\"90%\" variation=\"outline\" type=\"submit\">\r\n          작성 하기\r\n        </Button>\r\n      </Form>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst WriteContainerWrapper = css`\r\n  width: 30rem;\r\n  padding: 2rem;\r\n  margin: 3rem auto;\r\n  border: 1px solid ${COLORS.primary};\r\n  border-radius: 1rem;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);\r\n    transition: 0.3s;\r\n  }\r\n`;\r\n\r\nconst radioWrapper = css`\r\n  margin-top: 0.3rem;\r\n  align-items: center;\r\n  word-break: keep-all;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst imageWrapper = css`\r\n  width: 350px;\r\n  img {\r\n    margin-top: 1rem;\r\n  }\r\n`;\r\n\r\nexport default React.memo(WriteContainer);\r\n","/**@jsx jsx */\r\nimport { useState, useContext } from \"react\";\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { Input, Button, Form } from \"../components\";\r\nimport { fetchData } from \"../library\";\r\nimport { LoginContext } from \"../store\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Label } from \"../components/Label\";\r\n\r\nconst LoginContainer = () => {\r\n  const [loginInfo, setLoginInfo] = useState({\r\n    user_Id_FF: \"\",\r\n    user_Password_FF: \"\",\r\n  });\r\n\r\n  const { user_Id_FF, user_Password_FF } = loginInfo;\r\n  const { setLoginStatus } = useContext(LoginContext);\r\n\r\n  const getInputValue = (e) => {\r\n    const { name, value } = e.target;\r\n    setLoginInfo({ ...loginInfo, [name]: value });\r\n  };\r\n\r\n  const login = (e) => {\r\n    e.preventDefault();\r\n    const loginData = loginInfo;\r\n    fetchData({ method: \"POST\", url: \"/users/login\", data: loginData })\r\n      .then((res) => {\r\n        const { data } = res;\r\n        if (data.success) {\r\n          sessionStorage.setItem(\"user_Id\", data.user_Id);\r\n          sessionStorage.setItem(\"logon\", data.success);\r\n          setLoginStatus(\r\n            JSON.stringify({ user_Id: data.user_Id, logon: true })\r\n          );\r\n          alert(\"로그인에 성공했습니다.\");\r\n          return window.history.go(-1);\r\n        } else {\r\n          alert(data.msg);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n  };\r\n\r\n  return (\r\n    <section css={loginWrapper}>\r\n      <header>\r\n        <h1 style={{ fontSize: \"1.4rem\" }}>환영합니다.</h1>\r\n      </header>\r\n      <article>\r\n        <Form onSubmit={login}>\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <Label htmlFor=\"user_Id_FF\">아이디</Label>\r\n                </td>\r\n                <td>\r\n                  <Input\r\n                    name=\"user_Id_FF\"\r\n                    value={user_Id_FF}\r\n                    onChange={getInputValue}\r\n                    placeholder=\"ID를 입력하세요\"\r\n                    required={true}\r\n                  ></Input>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <Label htmlFor=\"user_Password_FF\">비밀번호</Label>\r\n                </td>\r\n                <td>\r\n                  <Input\r\n                    name=\"user_Password_FF\"\r\n                    value={user_Password_FF}\r\n                    type=\"password\"\r\n                    onChange={getInputValue}\r\n                    placeholder=\"PW를 입력하세요\"\r\n                    required={true}\r\n                  ></Input>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td colSpan=\"2\">\r\n                  <Button\r\n                    variation=\"outline\"\r\n                    color=\"teritiaty\"\r\n                    type=\"submit\"\r\n                    width=\"100%\"\r\n                  >\r\n                    로그인\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td\r\n                  colSpan=\"2\"\r\n                  style={{\r\n                    fontSize: \"0.9rem\",\r\n                    color: \"#5a6a6a\",\r\n                    textAlign: \"right\",\r\n                    \"&:hover\": {\r\n                      color: \"black\",\r\n                    },\r\n                  }}\r\n                >\r\n                  <Link to=\"/signup\">회원이 아니신가요?</Link>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </Form>\r\n      </article>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst loginWrapper = css`\r\n  margin: 9rem auto;\r\n  width: 27rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border: 1px solid black;\r\n  border-radius: 0.2rem;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  a {\r\n    text-decoration: none;\r\n    color: inherit;\r\n  }\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);\r\n    transition: 0.3s;\r\n  }\r\n`;\r\n\r\nexport default LoginContainer;\r\n","/** @jsx jsx */\r\nimport { useState } from \"react\";\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { Button, Input, Form } from \"../components\";\r\nimport { COLORS } from \"../assets/colors\";\r\nimport { fetchData } from \"../library\";\r\nimport { Label } from \"../components/Label\";\r\n\r\nconst SignUpContainer = () => {\r\n  const [signUp, setSignUp] = useState({\r\n    user_Id: \"\",\r\n    user_Name: \"\",\r\n    user_Password: \"\",\r\n    user_Password_check: \"\",\r\n    user_Email: \"\",\r\n  });\r\n\r\n  const {\r\n    user_Id,\r\n    user_Name,\r\n    user_Password,\r\n    user_Password_check,\r\n    user_Email,\r\n  } = signUp;\r\n\r\n  const setValues = (e) => {\r\n    const { value, name } = e.target;\r\n    setSignUp({ ...signUp, [name]: value });\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (user_Password !== user_Password_check)\r\n      return alert(\"비밀번호가 맞지 않습니다.\");\r\n\r\n    const data = signUp;\r\n\r\n    fetchData({ method: \"POST\", url: \"users/signup\", data }).then((res) => {\r\n      const { data } = res;\r\n      if (data) {\r\n        alert(\"회원 가입이 성공적으로 이루어졌습니다.\");\r\n        return (window.location.href = \"/\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <section css={WriteContainerWrapper}>\r\n      <Form onSubmit={onSubmit}>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td colSpan=\"2\" style={{ textAlign: \"center\" }}>\r\n                <h1>회원 가입</h1>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"user_Name\">이름</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"user_Name\"\r\n                  autoFocus={true}\r\n                  placeholder=\"이름을 입력해 주세요\"\r\n                  value={user_Name}\r\n                  onChange={setValues}\r\n                  required={true}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"user_Id\">아이디</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"user_Id\"\r\n                  placeholder=\"아이디를 입력해 주세요\"\r\n                  value={user_Id}\r\n                  onChange={setValues}\r\n                  required={true}\r\n                />\r\n              </td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"user_Password\">비밀번호</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"user_Password\"\r\n                  placeholder=\"비밀번호를 입력해 주세요\"\r\n                  type=\"password\"\r\n                  value={user_Password}\r\n                  onChange={setValues}\r\n                  required={true}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"user_Password\">비밀번호 확인</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"user_Password_check\"\r\n                  placeholder=\"비밀번호를 확인해 주세요\"\r\n                  type=\"password\"\r\n                  value={user_Password_check}\r\n                  onChange={setValues}\r\n                  required={true}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"user_Email\">이메일</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"user_Email\"\r\n                  value={user_Email}\r\n                  onChange={setValues}\r\n                  placeholder=\"이메일을 입력해 주세요\"\r\n                  type=\"email\"\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td colSpan=\"2\">\r\n                <Button width=\"100%\" variation=\"outline\" type=\"submit\">\r\n                  작성하기\r\n                </Button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </Form>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst WriteContainerWrapper = css`\r\n  width: 30rem;\r\n  padding: 2rem;\r\n  margin: 5rem auto;\r\n  border: 1px solid ${COLORS.primary};\r\n  border-radius: 1rem;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);\r\n    transition: 0.3s;\r\n  }\r\n`;\r\n\r\nexport default SignUpContainer;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\nimport { SalesContainer, SalesHeaderContainer } from \"../containers\";\r\n\r\nconst SalesPage = () => {\r\n  return (\r\n    <>\r\n      <PageTemplate>\r\n        <SalesHeaderContainer />\r\n        <SalesContainer />\r\n      </PageTemplate>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SalesPage;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\n\r\nconst EnjoyPage = () => {\r\n  return (\r\n    <>\r\n      <PageTemplate>\r\n        <h1>ENJOY PAGE</h1>\r\n      </PageTemplate>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EnjoyPage;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\n\r\nconst QnAPage = () => {\r\n  return (\r\n    <>\r\n      <PageTemplate>\r\n        <h1>QnA PAGE</h1>\r\n      </PageTemplate>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QnAPage;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\nconst MyPage = () => {\r\n  return (\r\n    <>\r\n      <PageTemplate>\r\n        <h1>MyPAGE</h1>\r\n      </PageTemplate>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MyPage;\r\n","import React, { useContext } from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\nimport { LoginContainer } from \"../containers\";\r\nimport { LoginContext } from \"../store\";\r\n\r\nconst LoginPage = () => {\r\n  const { loginStatus } = useContext(LoginContext);\r\n  return (\r\n    <section>\r\n      <PageTemplate>\r\n        {!loginStatus.logon ? <LoginContainer /> : <h1>로그인중</h1>}\r\n      </PageTemplate>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\n\r\nconst ContactPage = () => {\r\n  return (\r\n    <>\r\n      <PageTemplate>\r\n        <h1>Contact PAGE</h1>\r\n      </PageTemplate>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactPage;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\nimport { DetailContainer } from \"../containers\";\r\n\r\nconst DetailPage = ({ match }) => {\r\n  const item_Id = match.params.id;\r\n  return (\r\n    <div>\r\n      <PageTemplate>\r\n        <DetailContainer item_Id={item_Id} />\r\n      </PageTemplate>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailPage;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\nimport { WriteContainer } from \"../containers\";\r\n\r\nconst WritePage = () => {\r\n  return (\r\n    <>\r\n      <PageTemplate>\r\n        <WriteContainer />\r\n      </PageTemplate>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WritePage;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\nimport { SignUpContainer } from \"../containers\";\r\n\r\nconst SingUpPage = () => {\r\n  return (\r\n    <PageTemplate>\r\n      <SignUpContainer />\r\n    </PageTemplate>\r\n  );\r\n};\r\n\r\nexport default SingUpPage;\r\n","/**@jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Input, Button, Form, Select } from \"../components\";\r\nimport { fetchData } from \"../library\";\r\nimport { COLORS } from \"../assets/colors\";\r\nimport { Label } from \"../components/Label\";\r\n\r\nconst ItemUpdateContainer = ({ item_Id }) => {\r\n  // 전송할 데이터를 상태로 관리\r\n  const [post, setPost] = useState({\r\n    item_Name: \"\",\r\n    deal_Location: \"\",\r\n    sales_KakaoId: \"\",\r\n    sales_Contact: \"\",\r\n    item_Status: \"\",\r\n    item_Price: \"\",\r\n    item_Brand_model: \"\",\r\n    item_Sort: \"기타\",\r\n    item_Writer: \"\",\r\n    item_Detail: \"\",\r\n    item_Number: Date.now(),\r\n    item_Picture: \"\",\r\n    user_Id: \"\",\r\n  });\r\n\r\n  // 업로드할 이미지 상태\r\n  const [uploadedImg, setUploadedImg] = useState({\r\n    fileName: \"\",\r\n    filePath: \"\",\r\n  });\r\n\r\n  // 수정할 데이터를 가져옴\r\n  useEffect(() => {\r\n    fetchData({\r\n      method: \"POST\",\r\n      url: `/sales/detail/item`,\r\n      data: { item_Id },\r\n    })\r\n      .then((res) => {\r\n        const { data } = res;\r\n        console.log(data);\r\n        setPost((prevItem) => data);\r\n        setUploadedImg((prevImg) => ({\r\n          fileName: \"uploadedImg\",\r\n          filePath: data.item_Picture,\r\n        }));\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n  }, [item_Id]);\r\n\r\n  // Input에 value로 연결할 값\r\n  const {\r\n    item_Name,\r\n    deal_Location,\r\n    sales_KakaoId,\r\n    sales_Contact,\r\n    item_Price,\r\n    item_Brand_model,\r\n    item_Detail,\r\n  } = post;\r\n\r\n  // Input 값 가져오기\r\n  const setValues = (e) => {\r\n    const { value, name } = e.target;\r\n    setPost({ ...post, [name]: value });\r\n  };\r\n\r\n  // 이미지 파일 서버로 전송\r\n  const getImage = (e) => {\r\n    const imgFile = e.target.files[0];\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"img\", imgFile);\r\n\r\n    fetchData({ method: \"POST\", data: formData, url: \"/sales/image\" }).then(\r\n      (res) => {\r\n        if (res) {\r\n          console.log(res);\r\n          const { fileName } = res.data;\r\n          setUploadedImg({\r\n            fileName,\r\n            filePath: `/images/${fileName}`,\r\n          });\r\n          setPost({ ...post, item_Picture: `/images/${fileName}` });\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  // 데이터 전송\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const user_Id = sessionStorage.getItem(\"user_Id\");\r\n    const data = post;\r\n\r\n    fetchData({\r\n      method: \"POST\",\r\n      data: {\r\n        ...data,\r\n        user_Id,\r\n        item_Price: Number(item_Price),\r\n        item_Writer: user_Id,\r\n      },\r\n      url: \"/sales/detail/update\",\r\n    }).then((res) => {\r\n      if (res.data) {\r\n        setPost({\r\n          item_Name: \"\",\r\n          deal_Location: \"\",\r\n          sales_KakaoId: \"\",\r\n          sales_Contact: \"\",\r\n          item_Status: \"\",\r\n          item_Price: \"\",\r\n          item_Brand_model: \"\",\r\n          item_Sort: \"\",\r\n          item_Writer: \"\",\r\n          item_Detail: \"\",\r\n          item_Picture: \"\",\r\n        });\r\n        window.location.href = \"/sales\";\r\n        return alert(\"글이 성공적으로 수정되었습니다.\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <section css={WriteContainerWrapper}>\r\n      <Form onSubmit={onSubmit}>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td colSpan=\"2\">\r\n                <Input\r\n                  name=\"item_Name\"\r\n                  width=\"100%\"\r\n                  autoFocus={true}\r\n                  placeholder=\"제목을 입력해 주세요\"\r\n                  value={item_Name}\r\n                  onChange={setValues}\r\n                  required={true}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"deal_Location\">거래 위치</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"deal_Location\"\r\n                  placeholder=\"거래 위치를 입력해 주세요\"\r\n                  value={deal_Location}\r\n                  onChange={setValues}\r\n                  required={true}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"sales_Contact\">연락처</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"sales_Contact\"\r\n                  placeholder=\"연락처를 입력해 주세요\"\r\n                  value={sales_Contact}\r\n                  onChange={setValues}\r\n                  required={true}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"sales_KakaoId\">카카오톡 ID</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"sales_KakaoId\"\r\n                  value={sales_KakaoId}\r\n                  onChange={setValues}\r\n                  placeholder=\"카톡 아이디를 입력해 주세요\"\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"item_Status\">팝니다/삽니다</Label>\r\n              </td>\r\n              <td>\r\n                <div css={radioWrapper}>\r\n                  <Input\r\n                    name=\"item_Status\"\r\n                    placeholder=\"악기를 사실 건가요, 파실 건가요?\"\r\n                    value=\"팝니다\"\r\n                    onChange={setValues}\r\n                    type=\"radio\"\r\n                    required={true}\r\n                  />\r\n                  <Label htmlFor=\"item_Stauts\">팝니다</Label>\r\n\r\n                  <Input\r\n                    name=\"item_Status\"\r\n                    placeholder=\"악기를 사실 건가요, 파실 건가요?\"\r\n                    value=\"삽니다\"\r\n                    onChange={setValues}\r\n                    type=\"radio\"\r\n                  />\r\n                  <Label htmlFor=\"item_Stauts\">삽니다</Label>\r\n                </div>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"item_Price\">가격</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"item_Price\"\r\n                  value={item_Price}\r\n                  placeholder=\"가격은 숫자만 입력해 주세요\"\r\n                  onChange={setValues}\r\n                  required={true}\r\n                  type=\"number\"\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"item_Brand_model\">제조사</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"item_Brand_model\"\r\n                  value={item_Brand_model}\r\n                  onChange={setValues}\r\n                  placeholder=\"제조사를 입력해 주세요\"\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"item_Sort\">악기 분류</Label>\r\n              </td>\r\n              <td>\r\n                <Select\r\n                  value={[\"기타\", \"드럼\", \"베이스\", \"키보드\"]}\r\n                  onChange={setValues}\r\n                  name=\"item_Sort\"\r\n                ></Select>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"item_Image\" file={true}>\r\n                  이미지 업로드\r\n                </Label>\r\n              </td>\r\n              <td>\r\n                <div>\r\n                  <Input type=\"file\" name=\"item_Image\" onChange={getImage} />\r\n                </div>\r\n              </td>\r\n            </tr>\r\n            {uploadedImg.fileName ? (\r\n              <tr>\r\n                <td colSpan=\"2\" css={imageWrapper}>\r\n                  <img\r\n                    src={uploadedImg.filePath}\r\n                    alt=\"productImage\"\r\n                    width=\"100%\"\r\n                  />\r\n                </td>\r\n                <td></td>\r\n              </tr>\r\n            ) : null}\r\n          </tbody>\r\n        </table>\r\n        <textarea\r\n          name=\"item_Detail\"\r\n          value={item_Detail}\r\n          onChange={setValues}\r\n        ></textarea>\r\n        <Button width=\"90%\" variation=\"outline\" type=\"submit\">\r\n          작성 하기\r\n        </Button>\r\n      </Form>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst WriteContainerWrapper = css`\r\n  width: 30rem;\r\n  padding: 2rem;\r\n  margin: 3rem auto;\r\n  border: 1px solid ${COLORS.primary};\r\n  border-radius: 1rem;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);\r\n    transition: 0.3s;\r\n  }\r\n`;\r\n\r\nconst radioWrapper = css`\r\n  margin-top: 0.3rem;\r\n  align-items: center;\r\n  word-break: keep-all;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst imageWrapper = css`\r\n  width: 350px;\r\n  img {\r\n    margin-top: 1rem;\r\n  }\r\n`;\r\n\r\nexport default ItemUpdateContainer;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\nimport ItemUpdateContainer from \"../containers/ItemUpdateContainer\";\r\n\r\nconst ItemUpdatePage = ({ match }) => {\r\n  const item_Id = match.params.id;\r\n  console.log(item_Id);\r\n  return (\r\n    <>\r\n      <PageTemplate>\r\n        <ItemUpdateContainer item_Id={item_Id} />\r\n      </PageTemplate>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ItemUpdatePage;\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { Global, css } from \"@emotion/core\";\r\nimport { LoginProvider } from \"./store\";\r\nimport {\r\n  MainPage,\r\n  SalesPage,\r\n  EnjoyPage,\r\n  QnAPage,\r\n  MyPage,\r\n  LoginPage,\r\n  ContactPage,\r\n  DetailPage,\r\n  WritePage,\r\n  SignUpPage,\r\n  ItemUpdatePage,\r\n} from \"./pages\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      {/* 전체 스타일 지정 */}\r\n      <Global\r\n        styles={css`\r\n          body {\r\n            box-sizing: border-box;\r\n            margin: 0;\r\n            padding: 0;\r\n          }\r\n        `}\r\n      />\r\n      <LoginProvider>\r\n        {/* ROUTE 설정 */}\r\n        <Route exact path=\"/\" component={MainPage} />\r\n        <Switch>\r\n          <Route path=\"/sales/detail/:id/update\" component={ItemUpdatePage} />\r\n          <Route path=\"/sales/detail/:id\" component={DetailPage} />\r\n          <Route path=\"/sales/write\" component={WritePage} />\r\n          <Route path=\"/sales\" component={SalesPage} />\r\n        </Switch>\r\n        <Route path=\"/enjoy\" component={EnjoyPage} />\r\n        <Route path=\"/qna\" component={QnAPage} />\r\n        <Route path=\"/mypage\" component={MyPage} />\r\n        <Route path=\"/login\" component={LoginPage} />\r\n        <Route path=\"/signup\" component={SignUpPage} />\r\n        <Route path=\"/contact\" component={ContactPage} />\r\n      </LoginProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}